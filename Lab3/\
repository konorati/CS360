/* Kristin Onorati
 * 10874126
 * CPTS 360 Lab 3
 * Group 1 Seq 3
 */

 #include "Lab3.h"

 // Get input from user on command line
 char* getInput()
 {
    char buf[1024];
    char *temp = NULL;
    int len = -1;

    printf("User@mysh: ");
    fgets(buf, 1024, stdin);
    len = strlen(buf);
    temp = (char*)malloc(sizeof(char)*len);
    strcpy(temp, buf);
    if(temp[len-1] == '\n')
    {
        temp[len-1] = 0;
    }
    return temp;
 }

 // Parse user input string into argv[] array of char*'s
 char** parseInput(char* input, int *inputArrSize)
 {
    int count = 0;
    char *str = NULL;
    char *tmpStr = NULL;
    // Allocate char* inputArr[20]
    char** inputArr = (char**)malloc(sizeof(char*)*20);
    while(str = strtok(input, " "))
    {
        tmpStr = (char *)malloc(sizeof(char)*strlen(str));
        strcpy(tmpStr, str);
        inputArr[count] = tmpStr;
        count++;
    }
    *inputArrSize = count;
    return inputArr;
 }

 // Determine which command to run and run it
 void handleCommand(char** input, int size)
 {
    int i = 0;
    // If command = cd run cd command
    if(strcmp(input[0], "cd") == 0)
    {
        cd(input[1]);
    }
    else if(strcmp(input[0], "exit") == 0)
    {
        exitProg();
    }
    else
    {
        otherCommand(input);
    }

    // After handling command free the memory in the input array
    for(i = 0; i < size; i++)
    {
        free(input[i]);
    }
    free(input);
 }

 // Change directory command
 void cd(char* pathname)
 {
    if(pathname)
    {
        chdir(pathname);
    }
    else
    {
        chdir(homePath);
    }
 }

 // Exit command
 void exitProg()
 {
    exit(1);
 }

 // All other commands
 void otherCommand(char** input)
 {
    char original[128];
    char new[1024];
    int i = 0;
    strcpy(original, input[0]);
   //Check each bin folder for command by concatenating pathname with input[0]
    while(commandPath[i++]) 
    {
        strcpy(new, original);
        strcat(new, commandPath[i]);
        execve(new, input, envp);
    }
 }

 void findPath()
 {
    char *token;
    int i = 0;
    char *name = "PATH";
    char *temp = getenv(name);
    printf("PATH = %s\n", temp);// For testing
    token = strtok(temp, ":");
    printf("First path token = %s\n", token); // For testing
    while(token != NULL)
    {
        commandPath[i++] = token;
        token = strtok(NULL,":");
    }
    i = 0;
    printf("Tokenized paths = ");
    while(commandPath[i++])
    {
        printf("%s ", commandPath[i]);
    }
    printf("\n");
 }

 void findHome()
 {
    int j = 0,i = 0;
    const char* name = "HOME";
    char *temp = getenv(name);
    printf("HOME= %s\n", temp);
    homePath = (char*)malloc(sizeof(char)*strlen(temp));
    /*if(*temp != 'H')
    {
        printf("You are not in the right place\n"); // For testing
    }
    else
    {*/
        while(temp[i])
        {
            homePath[j++] = temp[i++];
        }
        homePath[j] = 0;
        printf("HOME=%s\n", homePath);
    //}
 }

